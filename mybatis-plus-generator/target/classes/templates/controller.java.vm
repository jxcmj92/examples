package ${package.Controller};

import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.api.R;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import mybatisplus.entity.User;
import mybatisplus.service.IUserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.Assert;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import java.util.List;


@ApiOperation(value = "")
@Slf4j
@RestController
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

        #else
        #if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
        #else
public class ${table.controllerName} {
        #end

        #set ($serviceImplName=$table.serviceName.substring(0,1).toLowerCase()+$table.serviceName.substring(1))
        #set ($entityName=$table.entityName.substring(0,1).toLowerCase()+$table.entityName.substring(1))
     @Autowired
     private ${table.serviceName} ${serviceImplName};


     @ApiOperation(value = "分页查询")
     @RequestMapping("/listPage")
     public R page(@RequestBody Page<User> page, ${table.entityName} ${entityName}) {
         IPage<${table.entityName}> listPage = ${serviceImplName}.page(page, ${entityName});
         return R.ok(listPage);
     }


     @ApiOperation(value = "新增")
     @RequestMapping("/save")
     public R save(@RequestBody ${table.entityName} ${entityName}) {
         return ${serviceImplName}.save(${entityName}) ? R.ok(null) : R.failed("添加失败");
     }


     @ApiOperation(value = "删除")
     @RequestMapping("/delete")
     public R delete(String id) {
         Assert.hasText(id, "id不能为空");
         return ${serviceImplName}.removeById(id) ? R.ok(null) : R.failed("删除失败");
     }

     @ApiOperation(value = "批量删除")
     @RequestMapping("/batchDelete")
     public R batchDelete(List<String> ids) {
         Assert.notEmpty(ids, "集合不能为空");
         return ${serviceImplName}.removeByIds(ids) ? R.ok(null) : R.failed("删除失败");
     }


     @ApiOperation(value = "修改")
     @RequestMapping("/update")
     public R update(@RequestBody ${table.entityName} ${entityName}) {
         return ${serviceImplName}.updateById(${entityName}) ? R.ok(null) : R.failed("更新失败");
     }


     @ApiOperation(value = "通过id查询")
     @RequestMapping("/getOneById")
     public R info(String id) {
         Assert.hasText(id, "id不能为空");
         ${table.entityName} ${entityName} = ${serviceImplName}.getById(id);
         return R.ok(user);
     }
}

#end
